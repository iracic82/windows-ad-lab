# ============================================================================
# AWS Windows AD Lab - Configuration Example
# ============================================================================
# Copy this file to terraform.tfvars and update with your values:
# cp terraform.tfvars.example terraform.tfvars
#
# CRITICAL: VPC must have DNS hostnames enabled before deployment:
# aws ec2 modify-vpc-attribute --vpc-id <VPC_ID> --enable-dns-hostnames
# ============================================================================

# ===================================
# AWS Configuration
# ===================================

# AWS region to deploy resources
aws_region = "eu-central-1"

# AWS CLI profile to use
# Options:
# - "okta-sso" if using Okta SSO authentication
# - "default" for default AWS credentials
# - Your custom profile name
aws_profile = "okta-sso"

# ===================================
# Project Configuration
# ===================================

project_name = "windows-ad-lab"
environment  = "dev"
owner        = "YourName"

# ===================================
# Network Configuration
# ===================================

# VPC ID where resources will be deployed
# Get this from AWS Console or: aws ec2 describe-vpcs --profile okta-sso
vpc_id = "vpc-0123456789abcdef0"

# Subnet for Domain Controller 1 (should be in different AZ from DC2 for HA)
# Get subnets: aws ec2 describe-subnets --filters "Name=vpc-id,Values=vpc-xxxxx" --profile okta-sso
subnet_dc1 = "subnet-0123456789abcdef0"

# Subnet for Domain Controller 2 (different AZ recommended)
subnet_dc2 = "subnet-0123456789abcdef1"

# Subnets for client machines (can be same or different subnets)
# Clients will be distributed across these subnets in round-robin fashion
subnet_clients = [
  "subnet-0123456789abcdef0",
  "subnet-0123456789abcdef1"
]

# ===================================
# IP Address Configuration
# ===================================

# Private IP addresses for Domain Controllers
# These should be within the subnet CIDR ranges
dc1_private_ip = "10.100.1.100"
dc2_private_ip = "10.100.2.100"

# Private IPs for clients (optional - leave empty for auto-assignment)
# If specified, must match the number of clients
# Example:
# client_private_ips = [
#   "10.100.1.101",
#   "10.100.1.102",
#   "10.100.2.101",
#   "10.100.2.102"
# ]
client_private_ips = []

# ===================================
# Domain Configuration
# ===================================

domain_name         = "corp.infolab"
domain_netbios      = "CORP"
domain_admin_password = "YourSecurePassword123!"  # Change this! Use AWS Secrets Manager in production

# ===================================
# Instance Configuration
# ===================================

# AMI ID for Windows Server 2022
# Leave empty to auto-detect the latest Windows Server 2022 AMI
# To find specific AMI: aws ec2 describe-images --owners amazon --filters "Name=name,Values=Windows_Server-2022-English-Full-Base-*" --query "Images | sort_by(@, &CreationDate) | [-1].ImageId" --profile okta-sso
windows_ami = ""

# Instance types
dc_instance_type     = "t3.large"   # Domain Controllers need more resources
client_instance_type = "t3.medium"  # Clients can be smaller

# Root volume size in GB
root_volume_size = 100

# EC2 Key Pair name for RDP access
# Create key pair: aws ec2 create-key-pair --key-name windows-lab-key --query 'KeyMaterial' --output text > windows-lab-key.pem --profile okta-sso
key_name = "your-key-pair-name"

# ===================================
# Client Configuration
# ===================================

# Number of Windows client machines to create
client_count = 4

# Prefix for client machine names (will become WIN-CLIENT-1, WIN-CLIENT-2, etc.)
client_name_prefix = "WIN-CLIENT"

# ===================================
# Security Configuration
# ===================================

# CIDR blocks allowed to RDP into instances
# To allow from your current IP: curl -s ifconfig.me
# To allow from VPN: use your VPN CIDR range
# To allow from everywhere (NOT RECOMMENDED): ["0.0.0.0/0"]
allowed_rdp_cidrs = [
  "YOUR.PUBLIC.IP.ADDRESS/32"
]

# CIDR blocks allowed to WinRM into instances (for Ansible)
# Should be the IP where you'll run Ansible from
allowed_winrm_cidrs = [
  "YOUR.ANSIBLE.HOST.IP/32"
]

# ===================================
# Ansible Configuration
# ===================================

# Generate Ansible inventory automatically
generate_ansible_inventory = true

# Path where Ansible inventory will be generated
ansible_inventory_path = "../ansible/inventory/aws_windows.yml"

# Ansible WinRM username
ansible_user = "Administrator"

# ===================================
# DNS Configuration
# ===================================

# DNS forwarders for the domain
dns_forwarders = ["8.8.8.8", "1.1.1.1"]

# ============================================================================
# IMPORTANT NOTES
# ============================================================================
#
# 1. LDAP UDP Port - CRITICAL!
#    The security group includes LDAP UDP port 389, which is required for
#    domain controller discovery. Without it, domain joins will fail with:
#    "The specified domain either does not exist or could not be contacted"
#    This is automatically configured in security-groups.tf
#
# 2. VPC DNS Hostnames
#    Must be enabled on your VPC before deployment:
#    aws ec2 modify-vpc-attribute \
#      --vpc-id <YOUR_VPC_ID> \
#      --enable-dns-hostnames \
#      --profile okta-sso --region eu-central-1
#
# 3. Subnet Requirements
#    - DCs and clients can be in the same or different subnets
#    - Subnets must have sufficient available IPs
#    - Recommended: /28 or larger
#
# 4. Security Best Practices
#    - Restrict allowed_rdp_cidrs and allowed_winrm_cidrs to your IPs only
#    - Change domain_admin_password from default
#    - Use AWS Secrets Manager for passwords in production
#    - Enable Windows Firewall for production deployments
#
# 5. Cost Management
#    - 2x t3.large DCs: ~$0.34/hr
#    - 1x t3.medium client: ~$0.08/hr
#    - 3x EIPs: ~$0.03/hr
#    - Total: ~$0.45/hr or ~$324/month
#    Stop instances when not in use to save costs
#
# 6. Windows Server Version
#    - Currently using Windows Server 2025
#    - Auto-detects latest AMI if windows_ami is empty
#    - Can specify custom AMI if needed
#
# ============================================================================
