---
- name: Build AD forest with 2 DCs, DNS and DHCP
  hosts: windows
  gather_facts: no

  vars:
    domain_name: corp.infolab
    domain_netbios: CORP
    domain_admin_password: "{{ ansible_password }}"
    dc1_ip: 10.10.10.10
    dc2_ip: 10.10.10.71
    dns_forwarders: [8.8.8.8, 1.1.1.1]

  tasks:
    - name: Set DNS client on both nodes to DC1 initially
      ansible.windows.win_dns_client:
        adapter_names: '*'
        ipv4_addresses: ["{{ dc1_ip }}"]

    - name: Install ADDS, DNS, and DHCP roles
      ansible.windows.win_feature:
        name:
          - AD-Domain-Services
          - DNS
          - DHCP
        state: present
        include_management_tools: yes
      register: feat

    - name: Reboot after role install if requested
      ansible.windows.win_reboot:
        pre_reboot_delay: 5
        post_reboot_delay: 30
        reboot_timeout: 2400
      when: feat.reboot_required | default(false)

    # -----------------------------
    # DC1: Create forest root domain
    # -----------------------------
    - name: Promote DC1 as forest root (creates AD-integrated DNS for {{ domain_name }})
      microsoft.ad.domain:
        dns_domain_name: "{{ domain_name }}"
        safe_mode_password: "{{ ansible_password }}"
        install_dns: true
        reboot: true
      when: inventory_hostname == "dc1"

    - name: Wait for DC1 to come back after forest promotion
      ansible.builtin.wait_for_connection:
        timeout: 2400
        connect_timeout: 60
      when: inventory_hostname == "dc1"

    - name: Wait for NetLogon/SYSVOL to be advertised (DC1)
      ansible.windows.win_shell: nltest /dsgetdc:{{ domain_name }}
      register: dc1_adv
      retries: 30
      delay: 20
      until: dc1_adv.rc == 0
      when: inventory_hostname == "dc1"

    - name: Wait for SYSVOL share to exist (DC1)
      ansible.windows.win_shell: |
        if (Test-Path \\localhost\SYSVOL) { exit 0 } else { exit 1 }
      register: sysvol1
      retries: 30
      delay: 20
      until: sysvol1.rc == 0
      when: inventory_hostname == "dc1"

    - name: Configure DNS forwarders on DC1
      ansible.windows.win_shell: |
        Import-Module DnsServer
        Set-DnsServerForwarder -IPAddress {{ dns_forwarders | join(',') }} -UseRootHint $false
        Get-DnsServerForwarder | Format-List | Out-String
      when: inventory_hostname == "dc1"

    - name: Configure DHCP server on DC1
      ansible.windows.win_shell: |
        Import-Module DhcpServer
        # Authorize DHCP server in AD
        Add-DhcpServerInDC -DnsName DC1.{{ domain_name }} -IPAddress {{ dc1_ip }}

        # Create DHCP scope (adjust range as needed)
        $scopeExists = Get-DhcpServerv4Scope -ErrorAction SilentlyContinue | Where-Object {$_.Name -eq "Lab-Scope"}
        if (-not $scopeExists) {
          Add-DhcpServerv4Scope -Name "Lab-Scope" -StartRange 10.10.10.50 -EndRange 10.10.10.60 -SubnetMask 255.255.255.240 -State Active
          Set-DhcpServerv4OptionValue -ScopeId 10.10.10.48 -DnsServer {{ dc1_ip }},{{ dc2_ip }} -Router 10.10.10.1
        }
        Get-DhcpServerv4Scope | Format-Table | Out-String
      when: inventory_hostname == "dc1"
      ignore_errors: yes

    # --------------------------------
    # DC2: Join domain & promote to DC
    # --------------------------------
    - name: Ensure DC2 DNS points to DC1 before join
      ansible.windows.win_dns_client:
        adapter_names: '*'
        ipv4_addresses: ["{{ dc1_ip }}"]
      when: inventory_hostname == "dc2"

    - name: From DC2, wait for LDAP 389 on DC1
      ansible.windows.win_shell: |
        $tcp = New-Object Net.Sockets.TcpClient
        $res = $tcp.BeginConnect("{{ dc1_ip }}",389,$null,$null)
        if (-not $res.AsyncWaitHandle.WaitOne(300000)) { throw "Timeout waiting for 389 on DC1" }
        $tcp.Close()
      when: inventory_hostname == "dc2"

    - name: Detect current domain membership (DC2)
      ansible.windows.win_shell: "(Get-WmiObject Win32_ComputerSystem).PartOfDomain"
      register: dc2_part_of_domain
      changed_when: false
      when: inventory_hostname == "dc2"

    - name: Join DC2 to the domain (skip if already joined)
      microsoft.ad.membership:
        dns_domain_name: "{{ domain_name }}"
        domain_admin_user: "{{ domain_netbios }}\\Administrator"
        domain_admin_password: "{{ domain_admin_password }}"
        state: domain
      when:
        - inventory_hostname == "dc2"
        - dc2_part_of_domain.stdout | trim | lower != 'true'

    - name: Reboot DC2 after domain join
      ansible.windows.win_reboot:
        pre_reboot_delay: 10
        post_reboot_delay: 60
        reboot_timeout: 2400
        connect_timeout: 60
      when: inventory_hostname == "dc2"

    - name: Wait for DC2 after join
      ansible.builtin.wait_for_connection:
        timeout: 2400
        connect_timeout: 60
      when: inventory_hostname == "dc2"

    - name: Ensure DC2 DNS still points to DC1 before promotion
      ansible.windows.win_dns_client:
        adapter_names: '*'
        ipv4_addresses: ["{{ dc1_ip }}"]
      when: inventory_hostname == "dc2"

    - name: Is DC2 already a DC?
      ansible.windows.win_shell: |
        try {
          Import-Module ActiveDirectory
          $null = Get-ADDomainController -Server localhost -ErrorAction Stop
          'true'
        } catch { 'false' }
      register: dc2_is_dc
      changed_when: false
      when: inventory_hostname == "dc2"

    - name: Promote DC2 to additional domain controller with DNS
      microsoft.ad.domain_controller:
        dns_domain_name: "{{ domain_name }}"
        domain_admin_user: "{{ domain_netbios }}\\Administrator"
        domain_admin_password: "{{ domain_admin_password }}"
        safe_mode_password: "{{ ansible_password }}"
        install_dns: yes
        state: domain_controller
        reboot: true
      when:
        - inventory_hostname == "dc2"
        - dc2_is_dc.stdout | default('false') | trim | lower != 'true'

    - name: Wait for DC2 after DC promotion
      ansible.builtin.wait_for_connection:
        timeout: 2400
        connect_timeout: 60
      when: inventory_hostname == "dc2"

    - name: Wait for NetLogon/SYSVOL to be advertised (DC2)
      ansible.windows.win_shell: nltest /dsgetdc:{{ domain_name }}
      register: dc2_adv
      retries: 30
      delay: 20
      until: dc2_adv.rc == 0
      when: inventory_hostname == "dc2"

    - name: Wait for SYSVOL share to exist (DC2)
      ansible.windows.win_shell: |
        if (Test-Path \\localhost\SYSVOL) { exit 0 } else { exit 1 }
      register: sysvol2
      retries: 30
      delay: 20
      until: sysvol2.rc == 0
      when: inventory_hostname == "dc2"

    - name: Configure DNS forwarders on DC2
      ansible.windows.win_shell: |
        Import-Module DnsServer
        Set-DnsServerForwarder -IPAddress {{ dns_forwarders | join(',') }} -UseRootHint $false
        Get-DnsServerForwarder | Format-List | Out-String
      when: inventory_hostname == "dc2"

    # --------------------------------
    # Final DNS client settings on DC1/DC2
    # --------------------------------
    - name: Update DNS client on DC1/2 to use itself first, then peer
      ansible.windows.win_dns_client:
        adapter_names: '*'
        ipv4_addresses:
          - "{{ dc1_ip if inventory_hostname == 'dc1' else dc2_ip }}"
          - "{{ dc2_ip if inventory_hostname == 'dc1' else dc1_ip }}"

# ================================
# Join Windows Clients to Domain
# ================================
- name: Join Windows clients to domain
  hosts: windows_clients
  gather_facts: no

  vars:
    domain_name: corp.infolab
    domain_netbios: CORP
    domain_admin_password: "{{ ansible_password }}"
    dc1_ip: 10.10.10.10

  tasks:
    - name: Set DNS to point to DC1
      ansible.windows.win_dns_client:
        adapter_names: '*'
        ipv4_addresses: ["{{ dc1_ip }}"]

    - name: Wait for domain to be reachable
      ansible.windows.win_shell: |
        $tcp = New-Object Net.Sockets.TcpClient
        $res = $tcp.BeginConnect("{{ dc1_ip }}",389,$null,$null)
        if (-not $res.AsyncWaitHandle.WaitOne(60000)) { throw "Cannot reach domain controller" }
        $tcp.Close()

    - name: Check if already domain-joined
      ansible.windows.win_shell: "(Get-WmiObject Win32_ComputerSystem).PartOfDomain"
      register: is_domain_member
      changed_when: false

    - name: Join client to domain
      microsoft.ad.membership:
        dns_domain_name: "{{ domain_name }}"
        domain_admin_user: "{{ domain_netbios }}\\Administrator"
        domain_admin_password: "{{ domain_admin_password }}"
        state: domain
        reboot: yes
      when: is_domain_member.stdout | trim | lower != 'true'

    - name: Wait for client after domain join
      ansible.builtin.wait_for_connection:
        timeout: 2400
        connect_timeout: 60
      when: is_domain_member.stdout | trim | lower != 'true'

    - name: Verify domain membership
      ansible.windows.win_shell: |
        $cs = Get-WmiObject Win32_ComputerSystem
        "Computer: $($cs.Name)"
        "Domain: $($cs.Domain)"
        "Part of domain: $($cs.PartOfDomain)"
      register: domain_info

    - name: Display domain membership
      ansible.builtin.debug:
        msg: "{{ domain_info.stdout_lines }}"
